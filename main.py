from naoqi import ALProxy
import time
import math

# write your port name here
tts = ALProxy("ALTextToSpeech", "127.0.0.1", 9559) 
motionProxy = ALProxy("ALMotion", "127.0.0.1", 9559)

names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.36, 3.16])
keys.append([[-0.17, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.160616, [3, -0.933333, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.36, 3.16])
keys.append([[0, [3, -0.133333, 0], [3, 0.933333, 0]], [0, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.36, 3.16])
keys.append([[0.0701587, [3, -0.133333, 0], [3, 0.933333, 0]], [0.0835226, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.36, 3.16])
keys.append([[-0.10313, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.107048, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[-0.559927, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.417833, [3, -0.266667, 0], [3, 0.133333, 0]], [-0.417833, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.417833, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.417833, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.431954, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.42194, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.433729, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[-1.21406, [3, -0.133333, 0], [3, 0.266667, 0]], [-1.20195, [3, -0.266667, 0], [3, 0.133333, 0]], [-1.20195, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20195, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.20195, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.21452, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.2043, [3, -0.133333, -0.00226095], [3, 0.266667, 0.0045219]], [-1.19418, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.296379, [3, -0.133333, 0], [3, 0.266667, 0]], [0.296585, [3, -0.266667, 0], [3, 0.133333, 0]], [0.296585, [3, -0.133333, 0], [3, 0.133333, 0]], [0.296585, [3, -0.133333, 0], [3, 0.133333, 0]], [0.296585, [3, -0.133333, 0], [3, 0.133333, 0]], [0.296585, [3, -0.133333, 0], [3, 0.133333, 0]], [0.296585, [3, -0.133333, 0], [3, 0.266667, 0]], [1, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.36, 3.16])
keys.append([[0.182419, [3, -0.133333, 0], [3, 0.933333, 0]], [0.129447, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.36, 3.16])
keys.append([[0.107335, [3, -0.133333, 0], [3, 0.933333, 0]], [0.109498, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.36, 3.16])
keys.append([[-0.159691, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.160193, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.36, 3.16])
keys.append([[-0.089004, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.0872552, [3, -0.933333, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[1.50585, [3, -0.133333, 0], [3, 0.266667, 0]], [1.43857, [3, -0.266667, 0], [3, 0.133333, 0]], [1.43857, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43857, [3, -0.133333, 0], [3, 0.133333, 0]], [1.43857, [3, -0.133333, 0], [3, 0.133333, 0]], [1.42951, [3, -0.133333, 0], [3, 0.133333, 0]], [1.44055, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.0760369, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.198813, [3, -0.133333, 0], [3, 0.266667, 0]], [0.223846, [3, -0.266667, 0], [3, 0.133333, 0]], [0.223846, [3, -0.133333, 0], [3, 0.133333, 0]], [0.223846, [3, -0.133333, 0], [3, 0.133333, 0]], [0.223846, [3, -0.133333, 0], [3, 0.133333, 0]], [0.244349, [3, -0.133333, 0], [3, 0.133333, 0]], [0.232997, [3, -0.133333, 0.0113521], [3, 0.266667, -0.0227043]], [-0.0111126, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.105004, [3, -0.133333, 0], [3, 0.266667, 0]], [0.106233, [3, -0.266667, 0], [3, 0.133333, 0]], [0.106233, [3, -0.133333, 0], [3, 0.133333, 0]], [0.106233, [3, -0.133333, 0], [3, 0.133333, 0]], [0.106233, [3, -0.133333, 0], [3, 0.133333, 0]], [0.106233, [3, -0.133333, 0], [3, 0.133333, 0]], [0.106233, [3, -0.133333, 0], [3, 0.266667, 0]], [1.30923, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.36, 3.16])
keys.append([[0.0768804, [3, -0.133333, 0], [3, 0.933333, 0]], [0.0845, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.36, 3.16])
keys.append([[0.0765043, [3, -0.133333, 0], [3, 0.933333, 0]], [0.110751, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.484128, [3, -0.133333, 0], [3, 0.266667, 0]], [0.375623, [3, -0.266667, 0], [3, 0.133333, 0]], [1.03947, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0438527, [3, -0.133333, 0], [3, 0.133333, 0]], [0.994733, [3, -0.133333, 0], [3, 0.133333, 0]], [0.48733, [3, -0.133333, 0.0642016], [3, 0.133333, -0.0642016]], [0.423128, [3, -0.133333, 0], [3, 0.266667, 0]], [0.423128, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[1.30761, [3, -0.133333, 0], [3, 0.266667, 0]], [0.366358, [3, -0.266667, 0], [3, 0.133333, 0]], [0.376446, [3, -0.133333, 0], [3, 0.133333, 0]], [0.376067, [3, -0.133333, 0.000378768], [3, 0.133333, -0.000378768]], [-0.168076, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.165247, [3, -0.133333, -0.00282886], [3, 0.133333, 0.00282886]], [1.2011, [3, -0.133333, 0], [3, 0.266667, 0]], [1.2011, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.328184, [3, -0.133333, 0], [3, 0.266667, 0]], [0.991115, [3, -0.266667, 0], [3, 0.133333, 0]], [0.991115, [3, -0.133333, 0], [3, 0.133333, 0]], [0.991115, [3, -0.133333, 0], [3, 0.133333, 0]], [0.991115, [3, -0.133333, 0], [3, 0.133333, 0]], [0.737048, [3, -0.133333, 0.115107], [3, 0.133333, -0.115107]], [0.300471, [3, -0.133333, 0], [3, 0.266667, 0]], [0.300471, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.36, 3.16])
keys.append([[0.167127, [3, -0.133333, 0], [3, 0.933333, 0]], [0.128883, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.36, 3.16])
keys.append([[-0.0841869, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.112873, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.36, 3.16])
keys.append([[-0.159691, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.160193, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.36, 3.16])
keys.append([[-0.089004, [3, -0.133333, 0], [3, 0.933333, 0]], [-0.0872552, [3, -0.933333, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[1.47626, [3, -0.133333, 0], [3, 0.266667, 0]], [-1.38566, [3, -0.266667, 0], [3, 0.133333, 0]], [-1.38566, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.38542, [3, -0.133333, -0.000243147], [3, 0.133333, 0.000243147]], [-1.36684, [3, -0.133333, -0.0185802], [3, 0.133333, 0.0185802]], [-0.854466, [3, -0.133333, -0.46695], [3, 0.133333, 0.46695]], [1.43486, [3, -0.133333, 0], [3, 0.266667, 0]], [1.43486, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[-0.173455, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.275038, [3, -0.266667, 0.020659], [3, 0.133333, -0.0103295]], [-0.285367, [3, -0.133333, 0.0103295], [3, 0.133333, -0.0103295]], [-0.961101, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0591022, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.411081, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.219411, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.219411, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.36, 1.16, 1.56, 1.96, 2.36, 2.76, 3.16, 3.96])
keys.append([[0.141651, [3, -0.133333, 0], [3, 0.266667, 0]], [0.00489187, [3, -0.266667, 0], [3, 0.133333, 0]], [0.00489187, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00489187, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00489187, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0137151, [3, -0.133333, -0.00882327], [3, 0.133333, 0.00882327]], [0.0980686, [3, -0.133333, 0], [3, 0.266667, 0]], [0.0980686, [3, -0.266667, 0], [3, 0, 0]]])

motionProxy.angleInterpolationBezier(names, times, keys) # waving
tts.say("Hi, human! I want to come with you.") # tts

shoulderName = "LShoulderPitch"
wristName = "LWristYaw"

useSen = 0
useSen1 = 0

while(1):
        
	speed = motionProxy.getAngles(shoulderName, useSen)  # angle from shoulder pitch (radians)
	speed_angle = (2 * 90 * speed[0]) / math.pi  # radian to degree

	rotation = motionProxy.getAngles(wristName, useSen1)  # amgle from wrist (radian)
	rotation_angle = (2 * 90 * rotation[0]) / math.pi  # radian -> degree
	rotation_rate = (-rotation_angle - 90) / 90  # rotation rate of wrist

	if((speed_angle > -73) & (speed_angle < 6.5)):  # condition: if the hand is raised or about 90 degrees, then the robot moves quickly
		print("Faster")
		motionProxy.move(2, 0.0, 0.0)
	elif((speed_angle > 6.5) & (speed_angle < 55)):  # condition: if the hand is about 90 degree or almost dropped, then the robot moves slowly
		print("Slower")
		motionProxy.move(1, 0.0, 0.0)
	else:  # it should stop if the arm is too bent or dropped
		print("Stop")
		motionProxy.move(0.0, 0.0, 0.0)

    
	if(rotation_angle < -91.7):
			print("Right")
			motionProxy.move(0.0, 0.0, -8 * (rotation_rate))

	elif(rotation_angle > 16.3):
			print("Left")
			motionProxy.move(0.0, 0.0, -rotation_rate)

	time.sleep(0.100)